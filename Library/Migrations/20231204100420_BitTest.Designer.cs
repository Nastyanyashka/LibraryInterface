// <auto-generated />
using System;
using Library;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20231204100420_BitTest")]
    partial class BitTest
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.14");

            modelBuilder.Entity("GivenExamplers", b =>
                {
                    b.Property<int>("ReaderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExamplerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("DateOfIssue")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DateOfReturn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Returned")
                        .HasColumnType("INTEGER");

                    b.HasKey("ReaderId", "ExamplerId");

                    b.HasIndex("ExamplerId");

                    b.ToTable("GivenExamplers");
                });

            modelBuilder.Entity("Library.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Library.Entities.Composition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AmountInLibrary")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TypeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("Year")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Composition");
                });

            modelBuilder.Entity("Library.Entities.Exampler", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompositionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfRack")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberOfShelf")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StorageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CompositionId");

                    b.HasIndex("StorageId");

                    b.ToTable("Exampler");
                });

            modelBuilder.Entity("Library.Entities.Reader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("PereregistrationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReaderTicket")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("RegistrationDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Readers");
                });

            modelBuilder.Entity("Library.Entities.Storage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Storage");
                });

            modelBuilder.Entity("Library.Entities.TypeOfComposition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TypeOfComposition");
                });

            modelBuilder.Entity("GivenExamplers", b =>
                {
                    b.HasOne("Library.Entities.Exampler", "Exampler")
                        .WithMany("GivenExamplers")
                        .HasForeignKey("ExamplerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Entities.Reader", "Reader")
                        .WithMany("GivenExamplers")
                        .HasForeignKey("ReaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exampler");

                    b.Navigation("Reader");
                });

            modelBuilder.Entity("Library.Entities.Composition", b =>
                {
                    b.HasOne("Library.Entities.TypeOfComposition", "Type")
                        .WithMany("Compositions")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Library.Entities.Exampler", b =>
                {
                    b.HasOne("Library.Entities.Composition", "Composition")
                        .WithMany("Examplers")
                        .HasForeignKey("CompositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.Entities.Storage", "Storage")
                        .WithMany("Examplers")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Composition");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("Library.Entities.Reader", b =>
                {
                    b.HasOne("Library.Entities.Category", "Category")
                        .WithMany("Readers")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Library.Entities.Category", b =>
                {
                    b.Navigation("Readers");
                });

            modelBuilder.Entity("Library.Entities.Composition", b =>
                {
                    b.Navigation("Examplers");
                });

            modelBuilder.Entity("Library.Entities.Exampler", b =>
                {
                    b.Navigation("GivenExamplers");
                });

            modelBuilder.Entity("Library.Entities.Reader", b =>
                {
                    b.Navigation("GivenExamplers");
                });

            modelBuilder.Entity("Library.Entities.Storage", b =>
                {
                    b.Navigation("Examplers");
                });

            modelBuilder.Entity("Library.Entities.TypeOfComposition", b =>
                {
                    b.Navigation("Compositions");
                });
#pragma warning restore 612, 618
        }
    }
}
